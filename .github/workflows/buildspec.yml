name: Build and Push

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version for the image (e.g., 1.2.3)"
        required: true

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.check-version.outputs.is_valid }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      IMAGE_REPO_NAME: ${{ vars.IMAGE_REPO_NAME }}
      NEW_VERSION: ${{ github.event.inputs.version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Get latest image version from ECR
        id: get-latest
        run: |
          LATEST_TAG=$(aws ecr describe-images \
            --repository-name $IMAGE_REPO_NAME \
            --region $AWS_DEFAULT_REGION \
            --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
            --output text)

          SEMVER=$(echo "$LATEST_TAG" | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+') || SEMVER="0.0.0"

          echo "Latest version in ECR: $SEMVER"
          echo "latest_version=$SEMVER" >> $GITHUB_ENV
          echo "latest_version=$SEMVER" >> $GITHUB_STEP_SUMMARY

      - name: Validate SemVer Increment
        id: check-version
        run: |
          LATEST_VERSION="${{ env.latest_version }}"

          if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "ERROR: Version must be in SemVer format (x.y.z)."
            exit 1
          fi

          IFS='.' read -r -a new_parts <<< "$NEW_VERSION"
          IFS='.' read -r -a latest_parts <<< "$LATEST_VERSION"

          if [[ ${new_parts[0]} -gt ${latest_parts[0]} || \
                (${new_parts[0]} -eq ${latest_parts[0]} && ${new_parts[1]} -gt ${latest_parts[1]}) || \
                (${new_parts[0]} -eq ${latest_parts[0]} && ${new_parts[1]} -eq ${latest_parts[1]} && ${new_parts[2]} -gt ${latest_parts[2]}) ]]; then
            echo "New version ($NEW_VERSION) is valid."
            echo "is_valid=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          else
            echo "ERROR: New version must be a correct increment of the latest ($LATEST_VERSION)."
            exit 1
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: validate-version
    if: needs.validate-version.outputs.is_valid == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      IMAGE_REPO_NAME: ${{ vars.IMAGE_REPO_NAME }}
      CERT_S3_URI: ${{ vars.CERT_S3_URI }}
      DOT_ENV_S3_URI: ${{ vars.DOT_ENV_S3_URI }}
      ASSETLINKS_URI: ${{ vars.ASSETLINKS_URI }}
      NEW_VERSION: ${{ github.event.inputs.version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Download Required Files from S3
        run: |
          aws s3 cp $CERT_S3_URI /tmp
          aws s3 cp $DOT_ENV_S3_URI /tmp
          aws s3 cp $ASSETLINKS_URI /tmp

      - name: Copy AssetLinks from S3
        run: |
          mkdir -p static/.well-known
          cp /tmp/assetlinks.json static/.well-known
          rm -f static/.gitkeep

      - name: Copy Certs from S3
        run: |
          cp /tmp/global-bundle.pem certs
          rm -f certs/.gitkeep

      - name: Copy Env from S3
        run: |
          cp /tmp/.env.* .env

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | \
          docker login --username AWS --password-stdin \
          $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

      - name: Build Docker Images
        run: |
          docker build --progress=plain --build-arg IMAGE_VERSION=$NEW_VERSION --target CLI -t cli .
          docker build --progress=plain --build-arg IMAGE_VERSION=$NEW_VERSION --target WEB -t web .
          docker build --progress=plain --build-arg IMAGE_VERSION=$NEW_VERSION --target PROXY -t proxy .

      - name: Tag Docker Images
        run: |
          docker tag cli $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:cli-$NEW_VERSION
          docker tag cli $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:cli-latest

          docker tag web $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:web-$NEW_VERSION
          docker tag web $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:web-latest

          docker tag proxy $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:proxy-$NEW_VERSION
          docker tag proxy $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:proxy-latest

      - name: Push Docker Images to ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:cli-$NEW_VERSION
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:cli-latest

          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:web-$NEW_VERSION
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:web-latest

          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:proxy-$NEW_VERSION
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:proxy-latest
